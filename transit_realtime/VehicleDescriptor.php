<?php
namespace transit_realtime;

// @@protoc_insertion_point(namespace:.transit_realtime.VehicleDescriptor)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 * Identification information for the vehicle performing the trip.
 *
 * -*- magic methods -*-
 *
 * @method string getId()
 * @method void setId(\string $value)
 * @method string getLabel()
 * @method void setLabel(\string $value)
 * @method string getLicensePlate()
 * @method void setLicensePlate(\string $value)
 */
class VehicleDescriptor extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.transit_realtime.VehicleDescriptor)
  
  /**
   * Internal system identification of the vehicle. Should be unique per
   * vehicle, and can be used for tracking the vehicle as it proceeds through
   * the system.
   *
   * @var string $id
   * @tag 1
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $id;
  
  /**
   * User visible label, i.e., something that must be shown to the passenger to
   * help identify the correct vehicle.
   *
   * @var string $label
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $label;
  
  /**
   * The license plate of the vehicle.
   *
   * @var string $license_plate
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $license_plate;
  
  
  // @@protoc_insertion_point(properties_scope:.transit_realtime.VehicleDescriptor)

  // @@protoc_insertion_point(class_scope:.transit_realtime.VehicleDescriptor)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "label",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "license_plate",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.VehicleDescriptor)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
