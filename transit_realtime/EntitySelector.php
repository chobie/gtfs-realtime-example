<?php
namespace transit_realtime;

// @@protoc_insertion_point(namespace:.transit_realtime.EntitySelector)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 * A selector for an entity in a GTFS feed.
 *
 * -*- magic methods -*-
 *
 * @method string getAgencyId()
 * @method void setAgencyId(\string $value)
 * @method string getRouteId()
 * @method void setRouteId(\string $value)
 * @method string getRouteType()
 * @method void setRouteType(\string $value)
 * @method \transit_realtime\TripDescriptor getTrip()
 * @method void setTrip(\transit_realtime\TripDescriptor $value)
 * @method string getStopId()
 * @method void setStopId(\string $value)
 */
class EntitySelector extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.transit_realtime.EntitySelector)
  
  /**
   * The values of the fields should correspond to the appropriate fields in the
   * GTFS feed.
   * At least one specifier must be given. If several are given, then the
   * matching has to apply to all the given specifiers.
   *
   * @var string $agency_id
   * @tag 1
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $agency_id;
  
  /**
   * @var string $route_id
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $route_id;
  
  /**
   * corresponds to route_type in GTFS.
   *
   * @var string $route_type
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT32
   **/
  protected $route_type;
  
  /**
   * @var \transit_realtime\TripDescriptor $trip
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $trip;
  
  /**
   * @var string $stop_id
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $stop_id;
  
  
  // @@protoc_insertion_point(properties_scope:.transit_realtime.EntitySelector)

  // @@protoc_insertion_point(class_scope:.transit_realtime.EntitySelector)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "agency_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "route_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT32,
        "name"     => "route_type",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "trip",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\TripDescriptor',
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "stop_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.EntitySelector)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
