<?php
namespace transit_realtime\TripUpdate;

// @@protoc_insertion_point(namespace:.transit_realtime.TripUpdate.StopTimeUpdate)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 * Realtime update for arrival and/or departure events for a given stop on a
 * trip. Updates can be supplied for both past and future events.
 * The producer is allowed, although not required, to drop past events.
 *
 * -*- magic methods -*-
 *
 * @method string getStopSequence()
 * @method void setStopSequence(\string $value)
 * @method string getStopId()
 * @method void setStopId(\string $value)
 * @method \transit_realtime\TripUpdate\StopTimeEvent getArrival()
 * @method void setArrival(\transit_realtime\TripUpdate\StopTimeEvent $value)
 * @method \transit_realtime\TripUpdate\StopTimeEvent getDeparture()
 * @method void setDeparture(\transit_realtime\TripUpdate\StopTimeEvent $value)
 * @method \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship getScheduleRelationship()
 * @method void setScheduleRelationship(\transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship $value)
 */
class StopTimeUpdate extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.transit_realtime.TripUpdate.StopTimeUpdate)
  
  /**
   * Must be the same as in stop_times.txt in the corresponding GTFS feed.
   *
   * @var string $stop_sequence
   * @tag 1
   * @label optional
   * @type \ProtocolBuffers::TYPE_UINT32
   **/
  protected $stop_sequence;
  
  /**
   * Must be the same as in stops.txt in the corresponding GTFS feed.
   *
   * @var string $stop_id
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $stop_id;
  
  /**
   * @var \transit_realtime\TripUpdate\StopTimeEvent $arrival
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $arrival;
  
  /**
   * @var \transit_realtime\TripUpdate\StopTimeEvent $departure
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $departure;
  
  /**
   * @var \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship $schedule_relationship
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_ENUM
   * @see \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship
   **/
  protected $schedule_relationship;
  
  
  // @@protoc_insertion_point(properties_scope:.transit_realtime.TripUpdate.StopTimeUpdate)

  // @@protoc_insertion_point(class_scope:.transit_realtime.TripUpdate.StopTimeUpdate)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_UINT32,
        "name"     => "stop_sequence",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "stop_id",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "arrival",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\TripUpdate\StopTimeEvent',
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "departure",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\TripUpdate\StopTimeEvent',
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_ENUM,
        "name"     => "schedule_relationship",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => \transit_realtime\TripUpdate\StopTimeUpdate\ScheduleRelationship::SCHEDULED,
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.TripUpdate.StopTimeUpdate)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
