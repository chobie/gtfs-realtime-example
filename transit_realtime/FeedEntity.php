<?php
namespace transit_realtime;

// @@protoc_insertion_point(namespace:.transit_realtime.FeedEntity)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 * A definition (or update) of an entity in the transit feed.
 *
 * -*- magic methods -*-
 *
 * @method string getId()
 * @method void setId(\string $value)
 * @method bool getIsDeleted()
 * @method void setIsDeleted(bool $value)
 * @method \transit_realtime\TripUpdate getTripUpdate()
 * @method void setTripUpdate(\transit_realtime\TripUpdate $value)
 * @method \transit_realtime\VehiclePosition getVehicle()
 * @method void setVehicle(\transit_realtime\VehiclePosition $value)
 * @method \transit_realtime\Alert getAlert()
 * @method void setAlert(\transit_realtime\Alert $value)
 */
class FeedEntity extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.transit_realtime.FeedEntity)
  
  /**
   * The ids are used only to provide incrementality support. The id should be
   * unique within a FeedMessage. Consequent FeedMessages may contain
   * FeedEntities with the same id. In case of a DIFFERENTIAL update the new
   * FeedEntity with some id will replace the old FeedEntity with the same id
   * (or delete it - see is_deleted below).
   * The actual GTFS entities (e.g. stations, routes, trips) referenced by the
   * feed must be specified by explicit selectors (see EntitySelector below for
   * more info).
   *
   * @var string $id
   * @tag 1
   * @label required
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $id;
  
  /**
   * Whether this entity is to be deleted. Relevant only for incremental
   * fetches.
   *
   * @var bool $is_deleted
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_BOOL
   **/
  protected $is_deleted;
  
  /**
   * Data about the entity itself. Exactly one of the following fields must be
   * present (unless the entity is being deleted).
   *
   * @var \transit_realtime\TripUpdate $trip_update
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $trip_update;
  
  /**
   * @var \transit_realtime\VehiclePosition $vehicle
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $vehicle;
  
  /**
   * @var \transit_realtime\Alert $alert
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $alert;
  
  
  // @@protoc_insertion_point(properties_scope:.transit_realtime.FeedEntity)

  // @@protoc_insertion_point(class_scope:.transit_realtime.FeedEntity)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "id",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_BOOL,
        "name"     => "is_deleted",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => false,
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "trip_update",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\TripUpdate',
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "vehicle",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\VehiclePosition',
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "alert",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\Alert',
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.FeedEntity)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
