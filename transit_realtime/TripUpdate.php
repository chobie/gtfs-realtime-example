<?php
namespace transit_realtime;

// @@protoc_insertion_point(namespace:.transit_realtime.TripUpdate)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 * Realtime update of the progress of a vehicle along a trip.
 * Depending on the value of ScheduleRelationship, a TripUpdate can specify:
 * - A trip that proceeds along the schedule.
 * - A trip that proceeds along a route but has no fixed schedule.
 * - A trip that have been added or removed with regard to schedule.
 * 
 * The updates can be for future, predicted arrival/departure events, or for
 * past events that already occurred.
 * Normally, updates should get more precise and more certain (see
 * uncertainty below) as the events gets closer to current time.
 * Even if that is not possible, the information for past events should be
 * precise and certain. In particular, if an update points to time in the past
 * but its update's uncertainty is not 0, the client should conclude that the
 * update is a (wrong) prediction and that the trip has not completed yet.
 * 
 * Note that the update can describe a trip that is already completed.
 * To this end, it is enough to provide an update for the last stop of the trip.
 * If the time of that is in the past, the client will conclude from that that
 * the whole trip is in the past (it is possible, although inconsequential, to
 * also provide updates for preceding stops).
 * This option is most relevant for a trip that has completed ahead of schedule,
 * but according to the schedule, the trip is still proceeding at the current
 * time. Removing the updates for this trip could make the client assume
 * that the trip is still proceeding.
 * Note that the feed provider is allowed, but not required, to purge past
 * updates - this is one case where this would be practically useful.
 *
 * -*- magic methods -*-
 *
 * @method \transit_realtime\TripDescriptor getTrip()
 * @method void setTrip(\transit_realtime\TripDescriptor $value)
 * @method \transit_realtime\VehicleDescriptor getVehicle()
 * @method void setVehicle(\transit_realtime\VehicleDescriptor $value)
 * @method array getStopTimeUpdate()
 * @method void appendStopTimeUpdate(\transit_realtime\TripUpdate\StopTimeUpdate $value)
 * @method string getTimestamp()
 * @method void setTimestamp(\string $value)
 */
class TripUpdate extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.transit_realtime.TripUpdate)
  
  /**
   * The Trip that this message applies to. There can be at most one
   * TripUpdate entity for each actual trip instance.
   * If there is none, that means there is no prediction information available.
   * It does//not* mean that the trip is progressing according to schedule.
   *
   * @var \transit_realtime\TripDescriptor $trip
   * @tag 1
   * @label required
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $trip;
  
  /**
   * Additional information on the vehicle that is serving this trip.
   *
   * @var \transit_realtime\VehicleDescriptor $vehicle
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $vehicle;
  
  /**
   * Updates to StopTimes for the trip (both future, i.e., predictions, and in
   * some cases, past ones, i.e., those that already happened).
   * The updates must be sorted by stop_sequence, and apply for all the
   * following stops of the trip up to the next specified one.
   * 
   * Example 1:
   * For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
   * delay of 0 for stop_sequence of the current stop means that the trip is
   * exactly on time.
   * 
   * Example 2:
   * For the same trip instance, 3 StopTimeUpdates are provided:
   * - delay of 5 min for stop_sequence 3
   * - delay of 1 min for stop_sequence 8
   * - delay of unspecified duration for stop_sequence 10
   * This will be interpreted as:
   * - stop_sequences 3,4,5,6,7 have delay of 5 min.
   * - stop_sequences 8,9 have delay of 1 min.
   * - stop_sequences 10,... have unknown delay.
   *
   * @var array $stop_time_update
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   * @see \transit_realtime\TripUpdate\StopTimeUpdate
   **/
  protected $stop_time_update;
  
  /**
   * Moment at which the vehicle's real-time progress was measured.  In POSIX
   * time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).
   *
   * @var string $timestamp
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_UINT64
   **/
  protected $timestamp;
  
  
  // @@protoc_insertion_point(properties_scope:.transit_realtime.TripUpdate)

  // @@protoc_insertion_point(class_scope:.transit_realtime.TripUpdate)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "trip",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\TripDescriptor',
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "vehicle",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\VehicleDescriptor',
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "stop_time_update",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\TripUpdate\StopTimeUpdate',
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_UINT64,
        "name"     => "timestamp",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.TripUpdate)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
