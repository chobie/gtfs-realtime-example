<?php
namespace transit_realtime;

// @@protoc_insertion_point(namespace:.transit_realtime.FeedMessage)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 * The contents of a feed message.
 * A feed is a continuous stream of feed messages. Each message in the stream is
 * obtained as a response to an appropriate HTTP GET request.
 * A realtime feed is always defined with relation to an existing GTFS feed.
 * All the entity ids are resolved with respect to the GTFS feed.
 * 
 * A feed depends on some external configuration:
 * - The corresponding GTFS feed.
 * - Feed application (updates, positions or alerts). A feed should contain only
 *   items of one specified application; all the other entities will be ignored.
 * - Polling frequency
 *
 * -*- magic methods -*-
 *
 * @method \transit_realtime\FeedHeader getHeader()
 * @method void setHeader(\transit_realtime\FeedHeader $value)
 * @method array getEntity()
 * @method void appendEntity(\transit_realtime\FeedEntity $value)
 */
class FeedMessage extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.transit_realtime.FeedMessage)
  
  /**
   * Metadata about this feed and feed message.
   *
   * @var \transit_realtime\FeedHeader $header
   * @tag 1
   * @label required
   * @type \ProtocolBuffers::TYPE_MESSAGE
   **/
  protected $header;
  
  /**
   * Contents of the feed.
   *
   * @var array $entity
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_MESSAGE
   * @see \transit_realtime\FeedEntity
   **/
  protected $entity;
  
  
  // @@protoc_insertion_point(properties_scope:.transit_realtime.FeedMessage)

  // @@protoc_insertion_point(class_scope:.transit_realtime.FeedMessage)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "header",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\FeedHeader',
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_MESSAGE,
        "name"     => "entity",
        "required" => false,
        "optional" => false,
        "repeated" => true,
        "packable" => false,
        "default"  => null,
        "message" => '\transit_realtime\FeedEntity',
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.FeedMessage)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
