<?php
namespace transit_realtime;

// @@protoc_insertion_point(namespace:.transit_realtime.Position)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 * A position.
 *
 * -*- magic methods -*-
 *
 * @method string getLatitude()
 * @method void setLatitude(\string $value)
 * @method string getLongitude()
 * @method void setLongitude(\string $value)
 * @method string getBearing()
 * @method void setBearing(\string $value)
 * @method string getOdometer()
 * @method void setOdometer(\string $value)
 * @method string getSpeed()
 * @method void setSpeed(\string $value)
 */
class Position extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.transit_realtime.Position)
  
  /**
   * Degrees North, in the WGS-84 coordinate system.
   *
   * @var string $latitude
   * @tag 1
   * @label required
   * @type \ProtocolBuffers::TYPE_FLOAT
   **/
  protected $latitude;
  
  /**
   * Degrees East, in the WGS-84 coordinate system.
   *
   * @var string $longitude
   * @tag 2
   * @label required
   * @type \ProtocolBuffers::TYPE_FLOAT
   **/
  protected $longitude;
  
  /**
   * Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
   * This can be the compass bearing, or the direction towards the next stop
   * or intermediate location.
   * This should not be direction deduced from the sequence of previous
   * positions, which can be computed from previous data.
   *
   * @var string $bearing
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_FLOAT
   **/
  protected $bearing;
  
  /**
   * Odometer value, in meters.
   *
   * @var string $odometer
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_DOUBLE
   **/
  protected $odometer;
  
  /**
   * Momentary speed measured by the vehicle, in meters per second.
   *
   * @var string $speed
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_FLOAT
   **/
  protected $speed;
  
  
  // @@protoc_insertion_point(properties_scope:.transit_realtime.Position)

  // @@protoc_insertion_point(class_scope:.transit_realtime.Position)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_FLOAT,
        "name"     => "latitude",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_FLOAT,
        "name"     => "longitude",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_FLOAT,
        "name"     => "bearing",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_DOUBLE,
        "name"     => "odometer",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_FLOAT,
        "name"     => "speed",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.Position)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
