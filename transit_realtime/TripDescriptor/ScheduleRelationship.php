<?php
namespace transit_realtime\TripDescriptor;

// @@protoc_insertion_point(namespace:.transit_realtime.TripDescriptor.ScheduleRelationship)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 */
class ScheduleRelationship extends \ProtocolBuffers\Enum
{
  // @@protoc_insertion_point(traits:.transit_realtime.TripDescriptor.ScheduleRelationship)
  
  /**
   * Trip that is running in accordance with its GTFS schedule, or is close
   * enough to the scheduled trip to be associated with it.
   */
  const SCHEDULED = 0;
  /**
   * An extra trip that was added in addition to a running schedule, for
   * example, to replace a broken vehicle or to respond to sudden passenger
   * load.
   */
  const ADDED = 1;
  /**
   * A trip that is running with no schedule associated to it, for example, if
   * there is no schedule at all.
   */
  const UNSCHEDULED = 2;
  /**
   * A trip that existed in the schedule but was removed.
   */
  const CANCELED = 3;
  /**
   * A trip that replaces a portion of static schedule.
   * If the trip selector identifies a certain trip instance, then only that
   * instance is replaced. If the selector identifies a route, then all the
   * trips along that route are replaced.
   * 
   * The replacement applies only to the portion of the trip supplied. For
   * instance, consider a route that goes through stops A,B,C,D,E,F, and a
   * REPLACEMENT trip provides data for stops A,B,C. Then, the times for stops
   * D,E,F are still taken from the static schedule.
   * 
   * A feed might supply several REPLACEMENT trips. In this case, the portion
   * of static schedule that is replaced is the union of what is defined by
   * all the feeds. Normally, all the REPLACEMENT trips should either
   * correspond to the same route or to individual trip instances.
   */
  const REPLACEMENT = 5;
  
  // @@protoc_insertion_point(const_scope:.transit_realtime.TripDescriptor.ScheduleRelationship)
  
  // @@protoc_insertion_point(class_scope:.transit_realtime.TripDescriptor.ScheduleRelationship)
  
  /**
   * @return \ProtocolBuffers\EnumDescriptor
   */
  public static function getEnumDescriptor()
  {
    static $descriptor;
    if (!$descriptor) {
      $builder = new \ProtocolBuffers\EnumDescriptorBuilder();
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::SCHEDULED,
        "name"  => 'SCHEDULED',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::ADDED,
        "name"  => 'ADDED',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::UNSCHEDULED,
        "name"  => 'UNSCHEDULED',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::CANCELED,
        "name"  => 'CANCELED',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::REPLACEMENT,
        "name"  => 'REPLACEMENT',
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.TripDescriptor.ScheduleRelationship)
      $descriptor = $builder->build();
    }
    return $descriptor;
  }
}
