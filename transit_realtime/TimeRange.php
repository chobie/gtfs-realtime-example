<?php
namespace transit_realtime;

// @@protoc_insertion_point(namespace:.transit_realtime.TimeRange)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: gtfs-realtime.proto
 *
 * A time interval. The interval is considered active at time 't' if 't' is
 * greater than or equal to the start time and less than the end time.
 *
 * -*- magic methods -*-
 *
 * @method string getStart()
 * @method void setStart(\string $value)
 * @method string getEnd()
 * @method void setEnd(\string $value)
 */
class TimeRange extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.transit_realtime.TimeRange)
  
  /**
   * Start time, in POSIX time (i.e., number of seconds since January 1st 1970
   * 00:00:00 UTC).
   * If missing, the interval starts at minus infinity.
   *
   * @var string $start
   * @tag 1
   * @label optional
   * @type \ProtocolBuffers::TYPE_UINT64
   **/
  protected $start;
  
  /**
   * End time, in POSIX time (i.e., number of seconds since January 1st 1970
   * 00:00:00 UTC).
   * If missing, the interval ends at plus infinity.
   *
   * @var string $end
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_UINT64
   **/
  protected $end;
  
  
  // @@protoc_insertion_point(properties_scope:.transit_realtime.TimeRange)

  // @@protoc_insertion_point(class_scope:.transit_realtime.TimeRange)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_UINT64,
        "name"     => "start",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_UINT64,
        "name"     => "end",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      // @@protoc_insertion_point(builder_scope:.transit_realtime.TimeRange)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
